// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/repositories/transaction.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "card-transactions/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTransaction) Save(transactions entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTransactionMockRecorder) Save(transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransaction)(nil).Save), transactions)
}
