// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/repositories/operationType.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "card-transactions/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOperationType is a mock of OperationType interface.
type MockOperationType struct {
	ctrl     *gomock.Controller
	recorder *MockOperationTypeMockRecorder
}

// MockOperationTypeMockRecorder is the mock recorder for MockOperationType.
type MockOperationTypeMockRecorder struct {
	mock *MockOperationType
}

// NewMockOperationType creates a new mock instance.
func NewMockOperationType(ctrl *gomock.Controller) *MockOperationType {
	mock := &MockOperationType{ctrl: ctrl}
	mock.recorder = &MockOperationTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationType) EXPECT() *MockOperationTypeMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockOperationType) GetByID(id int) (entity.OperationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(entity.OperationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOperationTypeMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOperationType)(nil).GetByID), id)
}
