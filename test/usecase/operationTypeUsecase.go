// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/operationType/operationTypeUsecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	entity "card-transactions/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOperationType is a mock of OperationType interface.
type MockOperationType struct {
	ctrl     *gomock.Controller
	recorder *MockOperationTypeMockRecorder
}

// MockOperationTypeMockRecorder is the mock recorder for MockOperationType.
type MockOperationTypeMockRecorder struct {
	mock *MockOperationType
}

// NewMockOperationType creates a new mock instance.
func NewMockOperationType(ctrl *gomock.Controller) *MockOperationType {
	mock := &MockOperationType{ctrl: ctrl}
	mock.recorder = &MockOperationTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationType) EXPECT() *MockOperationTypeMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOperationType) Get(id int) (entity.OperationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(entity.OperationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOperationTypeMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperationType)(nil).Get), id)
}
